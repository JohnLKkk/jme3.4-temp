//
// NOTE:
//
//  This is a modified version of the supplemental code from the paper titled
//     "Real-Time Global Illumination using Precomputed Light Field Probe":
//
//  The supplemental code and the paper can be found at:
//  http://research.nvidia.com/publication/real-time-global-illumination-using-precomputed-light-field-probes
//
#define GI_PI     (3.14159265358979323846)
#define GI_TWO_PI (2.0 * GI_PI)
uniform vec3                    g_ProbeCounts; // assumed to be a power of two!
uniform vec3                    g_ProbeStartPosition;
uniform vec3                    g_ProbeStep;
uniform int                     lowResolutionDownsampleFactor;
uniform sampler2DArray          m_IrradianceProbeGrid; // TODO: Size!
uniform sampler2DArray          m_MeanDistProbeGrid;   // TODO: Size!

///////////////////////////////////////////////////
// Temporary stuff! Clean up and optimize later! //
///////////////////////////////////////////////////

const vec2 TEX_SIZE       = vec2(1024.0);
const vec2 TEX_SIZE_SMALL = vec2(64.0);

const vec2 INV_TEX_SIZE       = vec2(1.0) / TEX_SIZE;
const vec2 INV_TEX_SIZE_SMALL = vec2(1.0) / TEX_SIZE_SMALL;

vec2 size(in sampler2D tex)
{
    return vec2(textureSize(tex, 0));
}

vec2 invSize(in sampler2D tex)
{
    return vec2(1.0) / size(tex);
}

///////////////////////////////////////////////////

const float minThickness = 0.03; // meters
const float maxThickness = 0.50; // meters

// Points exactly on the boundary in octahedral space (x = 0 and y = 0 planes) map to two different
// locations in octahedral space. We shorten the segments slightly to give unambigous locations that lead
// to intervals that lie within an octant.
const float rayBumpEpsilon    = 0.001; // meters

// If we go all the way around a cell and don't move farther than this (in m)
// then we quit the trace
const float minProgressDistance = 0.01;

//  zyx bit pattern indicating which probe we're currently using within the cell on [0, 7]
#define CycleIndex int

// On [0, probeCounts.x * probeCounts.y * probeCounts.z - 1]
#define ProbeIndex int

// probe xyz indices
#define GridCoord ivec3

// Enumerated value
#define TraceResult int
#define TRACE_RESULT_MISS    0
#define TRACE_RESULT_HIT     1
#define TRACE_RESULT_UNKNOWN 2

/**
 \param probeCoords Integer (stored in float) coordinates of the probe on the probe grid
 */
ProbeIndex gridCoordToProbeIndex(in vec3 probeCounts, in vec3 probeCoords) {
    return int(probeCoords.x + probeCoords.y * float(probeCounts.x) + probeCoords.z * float(probeCounts.x) * float(probeCounts.y));
    //return int(int(probeCoords.x) + int(probeCoords.y) * probeCounts.x + int(probeCoords.z) * probeCounts.x * probeCounts.y);
    //return int(int(probeCoords.x + probeCoords.y) * probeCounts.x + int(probeCoords.z) * probeCounts.x * probeCounts.y);
}

GridCoord baseGridCoord(in vec3 probeStartPosition, in vec3 probeStep, in vec3 probeCounts, vec3 X) {
    return clamp(GridCoord((X - probeStartPosition) / probeStep),
                GridCoord(0, 0, 0),
                GridCoord(int(probeCounts.x), int(probeCounts.y), int(probeCounts.z)) - GridCoord(1, 1, 1));
}

vec3 gridCoordToPosition(in vec3 probeStartPosition, in vec3 probeStep, GridCoord c) {
    return probeStep * vec3(c) + probeStartPosition;
    //return vec3(-10.0, 4.0, 0.0); // @Simplification
}

vec3 computePrefilteredIrradiance(vec3 wsPosition, vec3 wsN) {
	GridCoord baseGridCoord = baseGridCoord(g_ProbeStartPosition, g_ProbeStep, g_ProbeCounts, wsPosition);
	vec3 baseProbePos = gridCoordToPosition(g_ProbeStartPosition, g_ProbeStep, baseGridCoord);
	vec3 sumIrradiance = vec3(0.0);
	float sumWeight = 0.0;
	// Trilinear interpolation values along axes
	vec3 alpha = clamp((wsPosition - baseProbePos) / g_ProbeStep, vec3(0), vec3(1));

	// Iterate over the adjacent probes defining the surrounding vertex "cage"
	for (int i = 0; i < 8; ++i) {
		// Compute the offset grid coord and clamp to the probe grid boundary
		GridCoord  offset = ivec3(i, i >> 1, i >> 2) & ivec3(1);
		GridCoord  probeGridCoord = clamp(baseGridCoord + offset, GridCoord(0), GridCoord(g_ProbeCounts - 1));
		ProbeIndex p = gridCoordToProbeIndex(g_ProbeCounts, vec3(probeGridCoord));

		// Compute the trilinear weights based on the grid cell vertex to smoothly
		// transition between probes. Avoid ever going entirely to zero because that
		// will cause problems at the border probes.
		vec3 trilinear = mix(1.0 - alpha, alpha, vec3(offset));
		float weight = trilinear.x * trilinear.y * trilinear.z;

		// Make cosine falloff in tangent plane with respect to the angle from the surface to the probe so that we never
		// test a probe that is *behind* the surface.
		// It doesn't have to be cosine, but that is efficient to compute and we must clip to the tangent plane.
		vec3 probePos = gridCoordToPosition(g_ProbeStartPosition, g_ProbeStep, probeGridCoord);
		vec3 probeToPoint = wsPosition - probePos;
		vec3 dir = normalize(-probeToPoint);

		// Smooth back-face test
		weight *= max(0.05, dot(dir, wsN));

		vec2 octDir = octEncode(-dir) * 0.5 + 0.5;
		vec2 temp = texture2DArray(m_MeanDistProbeGrid, vec3(octDir, p)).rg;
		float mean = temp.x;
		float variance = abs(temp.y - (mean * mean));

		float distToProbe = length(probeToPoint);
		// http://www.punkuser.net/vsm/vsm_paper.pdf; equation 5
		float t_sub_mean = distToProbe - mean;
		float chebychev = variance / (variance + (t_sub_mean * t_sub_mean));

		weight *= ((distToProbe <= mean) ? 1.0 : max(chebychev, 0.0));

		// Avoid zero weight
		weight = max(0.0002, weight);

		sumWeight += weight;

		vec3 irradianceDir = normalize(wsN);
		vec2 octUV = octEncode(irradianceDir) * 0.5 + 0.5;

		vec3 probeIrradiance = texture2DArray(m_IrradianceProbeGrid, vec3(octUV, p)).rgb;

		// Debug probe contribution by visualizing as colors
		// probeIrradiance = 0.5 * probeIndexToColor(lightFieldSurface, p);

		sumIrradiance += weight * probeIrradiance;
	}

	return 2.0 * GI_PI * sumIrradiance / sumWeight;
}