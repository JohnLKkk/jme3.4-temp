// BEGIN@JohnKkk,render skyLights and reflectionProbe
// sky lights and reflection probes
#if NB_SKY_LIGHT_AND_REFLECTION_PROBES >= 1
uniform samplerCube g_ReflectionEnvMap;
uniform vec3 g_ShCoeffs[9];
uniform mat4 g_SkyLightData;
#endif
#if NB_SKY_LIGHT_AND_REFLECTION_PROBES >= 2
uniform samplerCube g_ReflectionEnvMap2;
uniform vec3 g_ShCoeffs2[9];
uniform mat4 g_SkyLightData2;
#endif
#if NB_SKY_LIGHT_AND_REFLECTION_PROBES == 3
uniform samplerCube g_ReflectionEnvMap3;
uniform vec3 g_ShCoeffs3[9];
uniform mat4 g_SkyLightData3;
#endif
vec3 renderSkyLightAndReflectionProbes(in vec3 viewDir, in vec3 wPosition, in vec3 normal, in vec3 norm, in float Roughness, in vec3 diffuseColor, in vec3 specularColor, in float ndotv, in vec3 ao){
    vec3 result = vec3(0);
    #if NB_SKY_LIGHT_AND_REFLECTION_PROBES >= 1
        vec3 color1 = vec3(0.0);
        vec3 color2 = vec3(0.0);
        vec3 color3 = vec3(0.0);
        float weight1 = 1.0;
        float weight2 = 0.0;
        float weight3 = 0.0;

        float ndf = renderProbe(viewDir, wPosition, normal, norm, Roughness, diffuseColor, specularColor, ndotv, ao, g_SkyLightData, g_ShCoeffs, g_ReflectionEnvMap, color1);
        #if NB_SKY_LIGHT_AND_REFLECTION_PROBES >= 2
            float ndf2 = renderProbe(viewDir, wPosition, normal, norm, Roughness, diffuseColor, specularColor, ndotv, ao, g_SkyLightData2, g_ShCoeffs2, g_ReflectionEnvMap2, color2);
        #endif
        #if NB_SKY_LIGHT_AND_REFLECTION_PROBES == 3
            float ndf3 = renderProbe(viewDir, wPosition, normal, norm, Roughness, diffuseColor, specularColor, ndotv, ao, g_SkyLightData3, g_ShCoeffs3, g_ReflectionEnvMap3, color3);
        #endif

        #if NB_SKY_LIGHT_AND_REFLECTION_PROBES >= 2
            float invNdf =  max(1.0 - ndf,0.0);
            float invNdf2 =  max(1.0 - ndf2,0.0);
            float sumNdf = ndf + ndf2;
            float sumInvNdf = invNdf + invNdf2;
        #if NB_SKY_LIGHT_AND_REFLECTION_PROBES == 3
            float invNdf3 = max(1.0 - ndf3,0.0);
            sumNdf += ndf3;
            sumInvNdf += invNdf3;
            weight3 =  ((1.0 - (ndf3 / sumNdf)) / (NB_PROBES - 1)) *  (invNdf3 / sumInvNdf);
        #endif

        weight1 = ((1.0 - (ndf / sumNdf)) / (NB_PROBES - 1)) *  (invNdf / sumInvNdf);
        weight2 = ((1.0 - (ndf2 / sumNdf)) / (NB_PROBES - 1)) *  (invNdf2 / sumInvNdf);

        float weightSum = weight1 + weight2 + weight3;

        weight1 /= weightSum;
        weight2 /= weightSum;
        weight3 /= weightSum;
        #endif

        #ifdef USE_AMBIENT_LIGHT
            color1.rgb *= g_AmbientLightColor.rgb;
            color2.rgb *= g_AmbientLightColor.rgb;
            color3.rgb *= g_AmbientLightColor.rgb;
        #endif
        result.rgb += color1 * clamp(weight1,0.0,1.0) + color2 * clamp(weight2,0.0,1.0) + color3 * clamp(weight3,0.0,1.0);

    #endif
    return result;
}
// END@render skyLights and reflectionProbe